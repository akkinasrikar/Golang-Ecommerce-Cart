// Code generated by MockGen. DO NOT EDIT.
// Source: repositories_gorm_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/akkinasrikar/ecommerce-cart/models"
	entities "github.com/akkinasrikar/ecommerce-cart/models/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateEcomAccount mocks base method.
func (m *MockRepositoryInterface) CreateEcomAccount(ecomAccountDetails entities.EcomUsers) (entities.EcomUsers, models.EcomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEcomAccount", ecomAccountDetails)
	ret0, _ := ret[0].(entities.EcomUsers)
	ret1, _ := ret[1].(models.EcomError)
	return ret0, ret1
}

// CreateEcomAccount indicates an expected call of CreateEcomAccount.
func (mr *MockRepositoryInterfaceMockRecorder) CreateEcomAccount(ecomAccountDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEcomAccount", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateEcomAccount), ecomAccountDetails)
}

// GetAllProducts mocks base method.
func (m *MockRepositoryInterface) GetAllProducts() ([]entities.Item, models.EcomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts")
	ret0, _ := ret[0].([]entities.Item)
	ret1, _ := ret[1].(models.EcomError)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockRepositoryInterfaceMockRecorder) GetAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockRepositoryInterface)(nil).GetAllProducts))
}

// Login mocks base method.
func (m *MockRepositoryInterface) Login(userDetails entities.Login) (entities.SignUp, models.EcomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", userDetails)
	ret0, _ := ret[0].(entities.SignUp)
	ret1, _ := ret[1].(models.EcomError)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockRepositoryInterfaceMockRecorder) Login(userDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockRepositoryInterface)(nil).Login), userDetails)
}

// SignUp mocks base method.
func (m *MockRepositoryInterface) SignUp(userDetails entities.SignUp) (entities.SignUp, models.EcomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", userDetails)
	ret0, _ := ret[0].(entities.SignUp)
	ret1, _ := ret[1].(models.EcomError)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockRepositoryInterfaceMockRecorder) SignUp(userDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockRepositoryInterface)(nil).SignUp), userDetails)
}
